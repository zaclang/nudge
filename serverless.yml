service: badger
frameworkVersion: ">=1.11.0 <2.0.0"
provider:
  stage: ${opt:stage, 'dev'}
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  versionFunctions: false
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    STAGE: ${self:provider.stage}
    USER_TABLE_NAME: ${self:custom.userTableName}
    USER_EMAIL_INDEX_NAME: ${self:custom.userEmailIndexName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.userTableName}
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.userTableName}/*
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.userTableName}/index/*
    - Effect: Allow
      Action:
        - ssm:GetParameters
      Resource:
        - arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:provider.stage}/badger/config/*
        - arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:provider.stage}/badger/secret/*

custom:
  userTableName: user-${self:provider.stage}
  userEmailIndexName: user-email-index-${self:provider.stage}

package:
  exclude:
    - package*.json
    - sample*
    - readme.md

plugins:
  - serverless-offline
  - serverless-pseudo-parameters
  - serverless-step-functions

functions:
  registration:
    handler: src/handlers/registration.handler
    events:
      - http:
          path: register
          method: post
          cors: true
  buildkite:
    handler: src/handlers/buildkite.handler
  notify:
    handler: src/handlers/notify.handler

stepFunctions:
  stateMachines:
    buildkiteEvent:
      name: myStateMachine
      definition:
        Comment: "this is a comment"
        StartAt: ParseBuildkiteEvent
        States:
          ParseBuildkiteEvent:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-buildkite"
            Next: NotifyStakeholders
          NotifyStakeholders:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-notify"
            End: true

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.userEmailIndexName}
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'